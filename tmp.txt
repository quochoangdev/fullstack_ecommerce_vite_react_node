
// Check Email
const checkEmailExist = async (email) => {
  let user = await db.User.findOne({ where: { email: email, }, });
  if (user) { return true; }
  return false;
};

// Check Phone
const checkPhoneExist = async (phone) => {
  let user = await db.User.findOne({ where: { phone: phone, }, });
  if (user) { return true; }
  return false;
};

// Hash Password
const hashUserPassword = async (password) => {
  var salt = bcrypt.genSaltSync(10);
  var hashPassword = bcrypt.hashSync(password, salt);
  return hashPassword;
};

// Register
const registerNewUser = async (rawUserData) => {
  try {
    // Check Email
    let isEmailExist = await checkEmailExist(rawUserData.email);
    if (isEmailExist) return { EM: "The email is already exist", EC: 1, DT: "", };

    // Check Phone
    let isPhoneExist = await checkPhoneExist(rawUserData.phone);
    if (isPhoneExist) return { EM: "The phone is already exist", EC: 1, DT: "", };

    // Hash Password
    let hashPassword = await hashUserPassword(rawUserData.password);

    await db.User.create({
      lastName: rawUserData.lastName,
      firstName: rawUserData.firstName,
      email: rawUserData.email,
      password: hashPassword,
      phone: rawUserData.phone,
      sex: rawUserData.sex,
      groupId: 3,
    });

    return { EM: "A user is created successfully!", EC: 0, DT: "", };
  } catch (error) {
    console.log(error);
    return { EM: "Something wrongs with services", EC: 1, DT: [], };
  }
};